@page "/Stock"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable


<h3>Stock Price Tracker</h3>

<p><strong>Starting Balance:</strong> $@Balance.ToString("N2")</p>

<p>Stock Symbol: @StockSymbol</p>
<p>Current Price: @StockPrice.ToString("F2")</p>


<!-- Buying Section -->
<h4>Buy Stock</h4>
<label>Shares to Buy:</label>
<input type="number" min="1" @bind="SharesToBuy" />
<button class="btn btn-success" @onclick="BuyStock">Buy</button>

@if (!string.IsNullOrEmpty(BuyErrorMessage))
{
    <p style="color: red;">@BuyErrorMessage</p>
}
@if (!string.IsNullOrEmpty(BuySuccessMessage))
{
    <p style="color: green;">@BuySuccessMessage</p>
}


<!-- Sell Stock Section -->
<h4>Sell Stock</h4>

@if (OwnedStocks.Any())
{
<label>Select Stock to Sell:</label>
<select @bind="SelectedStockSymbol">
    @foreach (var stock in OwnedStocks)
    {
    <option value="@stock.Symbol">@stock.Symbol - @stock.Shares Shares</option>
    }
</select>

<label>Sell Price:</label>
<input type="number" min="0" @bind="SellPrice" />

<label>Sell Date:</label>
<input type="date" @bind="SellDate" />

<button class="btn btn-danger" @onclick="SellStock">Sell</button>

@if (!string.IsNullOrEmpty(SellErrorMessage))
{
<p style="color: red;">@SellErrorMessage</p>
}
@if (!string.IsNullOrEmpty(SellSuccessMessage))
{
<p style="color: green;">@SellSuccessMessage</p>
}
}
else
{
    <p>No stocks owned yet.</p>
}

<!-- Portfolio Section -->
<h4>Portfolio</h4>
@if (OwnedStocks.Any())
{
<table class="table">
    <thead>
    <tr>
        <th>Stock Symbol</th>
        <th>Shares Owned</th>
        <th>Total Value</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var stock in OwnedStocks)
    {
    <tr>
        <td>@stock.Symbol</td>
        <td>@stock.Shares</td>
        <td>@(stock.Shares * StockPrice).ToString("C2")</td>
    </tr>
    }
    </tbody>
</table>
}
else
{
<p>No stocks owned yet.</p>
}

<!-- Transaction History Section -->
<h4>Past Transactions:</h4>
@if (TransactionHistory.Any())
{
<table class="table">
    <thead>
    <tr>
        <th>Stock Symbol</th>
        <th>Date</th>
        <th>Shares</th>
        <th>Price per Share</th>
        <th>Profit</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var transaction in TransactionHistory)
    {
    <tr>
        <td>@transaction.Symbol</td>
        <td>@transaction.TransactionDate.ToShortDateString()</td>
        <td>@transaction.Shares</td>
        <td>@transaction.PricePerShare.ToString("C2")</td>
        <td>@(transaction.Profit.HasValue ? transaction.Profit.Value.ToString("C2") : "-")</td>
    </tr>
    }
    </tbody>
</table>
}
else
{
<p>No transactions recorded yet.</p>
}


@if (IsConnected)
{
    <p style="color: green;">Connected to stock updates</p>
}
else
{
    <p style="color: red;">Disconnected from stock updates</p>

    <button @onclick="StartConnection">Reconnect</button>
}

@code {
    private decimal Balance { get; set; } = 50000m;
    private int SharesToBuy { get; set; } = 1;
    private decimal SellPrice { get; set; }
    private string SelectedStockSymbol = "";
    private DateTime SellDate = DateTime.Today;
    private List<StockPurchase> OwnedStocks = new();
    private string StockSymbol = "AAPL";
    private decimal StockPrice { get; set; }

    private string BuyErrorMessage = "";
    private string BuySuccessMessage = "";
    private string SellErrorMessage = "";
    private string SellSuccessMessage = "";
    
    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        await StartConnection();
    }

    private async Task StartConnection()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            return; // Already connected
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockHub")) 
            .Build();

        // Listen for stock updates
        hubConnection.On<string, decimal>("ReceiveStockUpdate", (symbol, price) =>
        {
            StockSymbol = symbol;
            StockPrice = price;

            // Debugging: Log the received values to the console
            Console.WriteLine($"Received stock update: {StockSymbol} - {StockPrice}");

            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection established.");
            _ = StartStockUpdates(); // Start the stock update loop
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
    }
    
    private class TransactionRecord
    {
        public string Symbol { get; set; } = "";
        public DateTime TransactionDate { get; set; }
        public int Shares { get; set; }
        public decimal PricePerShare { get; set; }
        public decimal? Profit { get; set; }
    }

    private List<TransactionRecord> TransactionHistory = new();
    
    private void BuyStock()
    {
        BuyErrorMessage = "";
        BuySuccessMessage = "";

        decimal totalCost = StockPrice * SharesToBuy;

        if (totalCost > Balance)
        {
            BuyErrorMessage = "Insufficient funds!";
        }
        else
        {
            Balance -= totalCost;
            var purchase = new StockPurchase
            {
                Symbol = StockSymbol,
                Shares = SharesToBuy,
                PurchasePrice = StockPrice,
                PurchaseDate = DateTime.Today
            };

            OwnedStocks.Add(purchase);

            // Adding to transaction history
            TransactionHistory.Add(new TransactionRecord
            {
                Symbol = StockSymbol,
                TransactionDate = DateTime.Today,
                Shares = SharesToBuy,
                PricePerShare = StockPrice,
                Profit = null
            });
            BuySuccessMessage = $"Bought {SharesToBuy} shares of {StockSymbol} for ${totalCost:N2}.";
        }
    }

    private void SellStock()
    {
        SellErrorMessage = "";
        SellSuccessMessage = "";

        var stock = OwnedStocks.FirstOrDefault(s => s.Symbol == SelectedStockSymbol);
        if (stock == null)
        {
            SellErrorMessage = "Stock not found!";
            return;
        }

        if (SellPrice <= 0)
        {
            SellErrorMessage = "Invalid sell price!";
            return;
        }

        decimal totalSellValue = SellPrice * stock.Shares;
        decimal totalBuyCost = stock.PurchasePrice * stock.Shares;
        decimal profit = totalSellValue - totalBuyCost;

        int holdingDays = (SellDate - stock.PurchaseDate).Days;
        decimal feePercentage = holdingDays <= 7 ? 0.18m : 0.05m;
        decimal fee = profit * feePercentage;
        decimal netProfit = profit - fee;

        Balance += totalSellValue - fee;

        OwnedStocks.Remove(stock);
    
        // Adding to transaction history
        TransactionHistory.Add(new TransactionRecord
        {
            Symbol = SelectedStockSymbol,
            TransactionDate = SellDate,
            Shares = stock.Shares,
            PricePerShare = SellPrice,
            Profit = netProfit
        });

        SellSuccessMessage = $@"""
                              Sold {stock.Shares} shares of {stock.Symbol}.
                              Total Profit: ${profit:N2}
                              Fee Deducted ({feePercentage * 100}%): ${fee:N2}
                              Net Profit Added: ${netProfit:N2}
                              New Balance: ${Balance:N2}
                          """;
    }
    
    private class StockPurchase
    {
        public string Symbol { get; set; } = "";
        public int Shares { get; set; }
        public decimal PurchasePrice { get; set; }
        public DateTime PurchaseDate { get; set; }
    }

    private async Task StartStockUpdates()
    {
        while (IsConnected)
        {
            await hubConnection.SendAsync("SendStockUpdate", StockSymbol);
            Console.WriteLine("Requesting stock update...");
            await Task.Delay(5000); 
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            Console.WriteLine("SignalR connection disposed.");
        }
    }
}