@page "/Stock"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

<h3>Stock Price Tracker</h3>
<p>Current Balance: @balance.ToString("C")</p>

<label for="Symbol">Stock Symbol</label>
<input id="Symbol" type="text" @bind="StockSymbol"/>
<button @onclick="RequestStockPrice">Get Price</button>

<p>Current Price: @StockPrice.ToString("F2")</p>

@if (StockPrice > 0)
{
<label for="Shares">Shares to Buy</label>
<input id="Shares" type="number" min="1" @bind="SharesToBuy"/>
<button @onclick="BuyShares">Buy</button>
}

@if (IsConnected)
{
    <p style="color: green;">Connected to stock updates</p>
}
else
{
    <p style="color: red;">Disconnected from stock updates</p>

    <button @onclick="StartConnection">Reconnect</button>
}

@code {
    private string StockSymbol { get; set; } = "";
    private decimal balance = 0m;
    private decimal StockPrice { get; set; }
    private int SharesToBuy { get; set; } = 0;
    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        await StartConnection();
        await LoadData();
    }

    private async Task StartConnection()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            return;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockHub"))
            .Build();

        hubConnection.On<string, decimal>("ReceiveStockUpdate", (symbol, price) =>
        {
            StockSymbol = symbol;
            StockPrice = price;
            Console.WriteLine($"Received stock update: {StockSymbol} - {StockPrice}");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, int, decimal, decimal>("StockPurchased", (symbol, shares, price, updatedBalance) =>
        {
            balance = updatedBalance; 
            Console.WriteLine($"Purchased {shares} shares of {symbol} at {price}. New balance: {balance}");
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection established.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
    }
    
    private async Task LoadData()
    {
        if (hubConnection is not null)
        {
            balance = await hubConnection.InvokeAsync<decimal>("GetBalance");
            InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task RequestStockPrice()
    {
        if (!string.IsNullOrWhiteSpace(StockSymbol) && IsConnected)
        {
            if (!string.IsNullOrWhiteSpace(StockSymbol))
            {
                await hubConnection.SendAsync("SendStockUpdate", StockSymbol);
            }
            else
            {
                Console.WriteLine("Invalid stock symbol.");
            }
            Console.WriteLine($"Requested price update for {StockSymbol}");
        }
    }
    
    private async Task BuyShares()
    {
        if (StockPrice > 0 && SharesToBuy > 0 && IsConnected)
        {
            await hubConnection.SendAsync("BuyStock", StockSymbol, SharesToBuy, StockPrice);
        }
    }


    private async Task StartStockUpdates()
    {
        while (IsConnected)
        {
            await hubConnection.SendAsync("SendStockUpdate", StockSymbol);
            Console.WriteLine("Requesting stock update...");
            await Task.Delay(5000); 
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            Console.WriteLine("SignalR connection disposed.");
        }
    }
}
